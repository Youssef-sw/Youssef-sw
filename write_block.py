def block_print(string, pen=None):


    """
    Write a Block of letters on screen is size of 7-line and 5-columns,
        Principe:
            ~ Any latter has pattern on this 7-line,
            ~ This pattern can be repeated, that wy I use globle def of pattern:
                  - 1 ==> Pen,
                  - 0 ==> Space,
    """
    # Letter definition on all lines
    def_letters = {
        'A': {
            (0,): '01110',
            (1, 2, 4, 5, 6): '10001',
            (3,): '11111'
        },
        'B': {
            (0, 3, 6): '11110',
            (1, 2, 4, 5): '10001'

        },

        'C': {
            (0, 6): '01110',
            (2, 3, 4): '10000',
            (1, 5): '10001'

        },
        'D': {
            (0, 6): '11110',
            (1, 2, 3, 4, 5): '10001'
        },
        'E': {
            (0, 3, 6): '11111',
            (1, 2, 4, 5): '10000'

        },
        'F': {
            (0, 3): '11111',
            (1, 2, 4, 5, 6): '10000',
        },
        'G': {
            (0, 6): '01110',
            (1, 4, 5): '10001',
            (2,): '10000',
            (3,): '10111'
        },
        'H': {
            (0, 1, 2, 4, 5, 6): '10001',
            (3,): '11111'
        },
        'I': {
            (0, 6): '11111',
            (1, 2, 3, 4, 5): '00100',
        },
        'J': {
            (0,): '11111',
            (1, 2, 3): '00100',
            (4, 5): '10100',
            (6,): '11000'
        },
        'K': {
            (0, 6): '10001',
            (1, 5): '10010',
            (2, 4): '10100',
            (3,): '11000'
        },
        'L': {
            (0, 1, 2, 3, 4, 5): '10000',
            (6,): '11111',
        },
        'M': {
            (0, 3, 4, 5, 6): '10001',
            (1,): '11011',
            (2,): '10101'
        },
        'N': {
            (0, 4, 5, 6): '10001',
            (1,): '11001',
            (2,): '10101',
            (3,): '10011'
        },
        'O': {
            (0, 6): '01110',
            (1, 2, 3, 4, 5): '10001'
        },
        'P': {
            (0, 3): '11110',
            (1, 2): '10001',
            (4, 5, 6): '10000'
        },
        'Q': {
            (0,): '01110',
            (1, 2, 3): '10001',
            (4,): '10101',
            (5,): '10011',
            (6,): '01111'
        },
        'R': {
            (0, 3): '11110',
            (1, 2): '10001',
            (4,): '10100',
            (5,): '10010',
            (6,): '10001'
        },
        'S': {
            (0, 3, 6): '01110',
            (1, 5): '10001',
            (2,): '10000',
            (4,): '00001'
        },
        'T': {
            (0,): '11111',
            (1, 2, 3, 4, 5, 6): '00100'
        },
        'U':{
            (0, 1, 2, 3, 4, 5): '10001',
            (6,): '01110'
        },
        'V': {
            (0, 1, 2, 3, 4): '10001',
            (5,): '01010',
            (6,): '00100'
        },
        'W': {
            (0, 1, 2): '10001',
            (3, 4, 5): '10101',
            (6,): '01010'
        },
        'X': {
            (0, 1, 5, 6): '10001',
            (2, 4): '01010',
            (3,): '00100'

        },
        'Y': {
            (0, 1): '10001',
            (2,): '01010',
            (3, 4, 5, 6): '00100'
        },
        'Z': {
            (0, 6): '11111',
            (1,): '00001',
            (2,): '00010',
            (3,): '00100',
            (4,): '01000',
            (5,): '10000'
        },
        ' ': {
            (0, 1, 2, 3, 4, 5, 6): '11111'
        }

    }
    def transformer(letter, pattern):
        return pattern.replace('1', letter).replace('0', ' ')
        
    string = string.strip()
    line = ""
    for row in range(7):
        for letter in string:
            letter = letter.upper()
            let_patterns = def_letters[letter]
            for key in list(let_patterns.keys()):
                if row in key:
                    r = let_patterns[key]
                    break
            if pen and letter != ' ':
            	line = line + transformer(pen, r) + " "
            else:
            	line = line + transformer(letter, r) + " "
        line += '\n'
    return line
if __name__ == "__main__":
    block = input("Enter string:")
    pen = input("Enter your pen:")
    print(block_print(block, pen))
